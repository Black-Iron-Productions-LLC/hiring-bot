// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  BUILDER
  PROGRAMMER
  ANIMATOR
  UI_ARTIST
  ICON_ARTIST
  VFX_ARTIST
}

model DeveloperReferral {
  id Int @id @default(autoincrement())

  discordUsername String @unique
  robloxUsername String @unique
  referrerDiscordUsername String
  // twitterURL String @unique

  rating Int
  additionalNotes String

  roles Role[]

  evaluations Evaluation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("DeveloperRef")
}

model EvaluationRoleInfo {
  id Int @id @default(autoincrement())

  evaluatorId Int 
  evaluator   Evaluator @relation(fields: [evaluatorId], references: [id])

  role Role

  queueMax Int

  @@unique([role, evaluatorId])
}

model Evaluation {
  id Int @id @default(autoincrement())

  developer   DeveloperReferral @relation(fields: [developerId], references: [id])
  developerId Int 

  applicationManagerRating    Int
  applicationManagerReportURL String

  applicationManagerId Int
  applicationManager   Evaluator @relation(name: "applicationManager", fields: [applicationManagerId], references: [id])

  hiringManagerId Int
  hiringManager   Evaluator @relation(name: "hiringManager", fields: [hiringManagerId], references: [id])
}

model Evaluator {
  id Int @id @default(autoincrement())

  discordID String @unique

  hiringManager      Boolean // This just indicates whether or not they can take up the role
  applicationManager Boolean // Not whether or not they occupy that role for a certain evaluation

  applicationManagerEvaluationIds String[]     
  applicationManagerEvaluations   Evaluation[] @relation(name: "applicationManager")

  hiringManagerEvaluationIds String[]     
  hiringManagerEvaluations   Evaluation[] @relation(name: "hiringManager")

  rolePreferences EvaluationRoleInfo[]
}
