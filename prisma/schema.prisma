// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum DeveloperRole {
  BUILDER
  PROGRAMMER
  ANIMATOR
  UI_ARTIST
  ICON_ARTIST
  VFX_ARTIST
	@@map("Role")
}

enum ManagerRole {
  ASSISTANT
  REF_AGENT

  APPMGR_BUILDER
  APPMGR_PROGRAMMER
  APPMGR_ANIMATOR
  APPMGR_UI_ARTIST
  APPMGR_ICON_ARTIST
  APPMGR_VFX_ARTIST

  HIRMGR_BUILDER
  HIRMGR_PROGRAMMER
  HIRMGR_ANIMATOR
  HIRMGR_UI_ARTIST
  HIRMGR_ICON_ARTIST
  HIRMGR_VFX_ARTIST

  EXEC_HIRMGR_BUILDER
  EXEC_HIRMGR_PROGRAMMER
  EXEC_HIRMGR_ANIMATOR
  EXEC_HIRMGR_UI_ARTIST
  EXEC_HIRMGR_ICON_ARTIST
  EXEC_HIRMGR_VFX_ARTIST
}

model DeveloperReferral {
  id Int @id @default(autoincrement())

  discordUsername String @unique
  discordID  String? @unique

  robloxUsername String @unique

  referrerDiscordUsername String
  referrerDiscordID String
  // twitterURL String @unique

  rating Int
  additionalNotes String

  roles DeveloperRole[]

  evaluations Interview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InterviewRoleInfo {
  id Int @id @default(autoincrement())

  evaluatorId Int
  evaluator   Evaluator @relation(fields: [evaluatorId], references: [id])

  maximumRole     EvaluatorRole?
  wantToInterview Boolean

  role DeveloperRole

  queueMax Int

  @@unique([role, evaluatorId])
}

enum EvaluatorRole {
  APPLICATION_MANAGER
  HIRING_MANAGER
}

model TaskEvaluation {
  id Int @id @default(autoincrement())

  report String?
  pass   Boolean?

  evaluatorId Int
  evaluator   Evaluator @relation(fields: [evaluatorId], references: [id])

  hmTask Task? @relation("HmTaskEvaluation")
  amTask Task? @relation("AmTaskEvaluation")
}

model InterviewEvaluation {
  id Int @id @default(autoincrement())

  report String?
  pass   Boolean?
  score  Int?

  evaluatorId Int
  evaluator   Evaluator @relation(fields: [evaluatorId], references: [id])

  hmInterview Interview? @relation("HmInterviewEvaluation")
  amInterview Interview? @relation("AmInterviewEvaluation")
}

model Task {
  id Int @id @default(autoincrement())

  name String
  work String?

  hmEvaluationId Int            @unique
  hmEvaluation   TaskEvaluation @relation("HmTaskEvaluation", fields: [hmEvaluationId], references: [id])

  amEvaluationId Int            @unique
  amEvaluation   TaskEvaluation @relation("AmTaskEvaluation", fields: [amEvaluationId], references: [id])

  interview   Interview @relation(fields: [interviewId], references: [id])
  interviewId Int

  @@unique([interviewId, name])
}

model Interview {
  id Int @id @default(autoincrement())

  complete Boolean @default(false)
  hired    Boolean?

  discordThreadId String? @unique

  role DeveloperRole

  developer   DeveloperReferral @relation(fields: [developerId], references: [id])
  developerId Int

  applicationManagerId Int
  applicationManager   Evaluator @relation("AmOnInterview", fields: [applicationManagerId], references: [id])

  hiringManagerId Int
  hiringManager   Evaluator @relation("HmOnInterview", fields: [hiringManagerId], references: [id])

  tasks Task[]
  tasksFinalized Boolean @default(false)

  hmEvaluationId Int?                 @unique
  hmEvaluation   InterviewEvaluation? @relation("HmInterviewEvaluation", fields: [hmEvaluationId], references: [id])

  amEvaluationId Int?                 @unique
  amEvaluation   InterviewEvaluation? @relation("AmInterviewEvaluation", fields: [amEvaluationId], references: [id])

  @@unique([developerId, role])
}

model Evaluator {
  id Int @id @default(autoincrement())

  discordID String @unique

  rolePreferences InterviewRoleInfo[]

  taskEvaluations      TaskEvaluation[]
  interviewEvaluations InterviewEvaluation[]

  amInterviews Interview[] @relation("HmOnInterview")
  hmInterviews Interview[] @relation("AmOnInterview")
}

model Guild {
  discordID String

  evaluatorChannelID String?
  evaluatorChannelMessageID String?

  adminChannelID String?
  adminChannelMessageID String?

  @@id([discordID])
}

model Member {
  id Int @id @default(autoincrement())

  role ManagerRole
}