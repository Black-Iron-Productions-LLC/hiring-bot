// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  BUILDER
  PROGRAMMER
  ANIMATOR
  UI_ARTIST
  ICON_ARTIST
  VFX_ARTIST
}

model DeveloperReferral {
  id Int @id @default(autoincrement())

  referrerDiscordID String

  discordID  String? @unique
  twitterURL String  @unique
  email      String  @unique

  firstName String
  lastName  String

  experience      String
  specialization  String
  additionalNotes String

  roles Role[]

  evaluations Interview[]

  @@unique([firstName, lastName])
}

model InterviewRoleInfo {
  id Int @id @default(autoincrement())

  evaluatorId Int
  evaluator   Evaluator @relation(fields: [evaluatorId], references: [id])

  maximumRole     EvaluatorRole?
  wantToInterview Boolean

  role Role

  queueMax Int

  @@unique([role, evaluatorId])
}

enum EvaluatorRole {
  APPLICATION_MANAGER
  HIRING_MANAGER
}

model TaskEvaluation {
  id Int @id @default(autoincrement())

  report String?
  pass   Boolean?

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int  @unique

  evaluatorId Int
  evaluator   Evaluator @relation(fields: [evaluatorId], references: [id])
}

model InterviewEvaluation {
  report               String?
  pass                 Boolean?
  score                Int?

  evaluatorOnInterview EvaluatorOnInterview @relation(fields: [evaluatorOnInterviewId], references: [id])
  evaluatorOnInterviewId Int

  @@id(evaluatorOnInterviewId)
}

model Task {
  id Int @id @default(autoincrement())

  name                          String
  applicationManagerPassOpinion Boolean?
  work                          String?
  report                        String?

  hmEvaluation TaskEvaluation?

  interview   Interview @relation(fields: [interviewId], references: [id])
  interviewId Int

  @@unique([interviewId, name])
}

model EvaluatorOnInterview {
  id Int @id @default(autoincrement())

  evaluatorRole EvaluatorRole

  managerId Int
  manager   Evaluator @relation(fields: [managerId], references: [id])

  interviewId Int
  interview   Interview @relation(fields: [interviewId], references: [id])

  interviewEvaluation InterviewEvaluation?

  @@unique([managerId, interviewId])
}

model Interview {
  id Int @id @default(autoincrement())

  discordThreadId String? @unique

  role Role

  developer   DeveloperReferral @relation(fields: [developerId], references: [id])
  developerId Int

  evaluators EvaluatorOnInterview[]

  tasks Task[]

  @@unique([developerId, role])
}

model Evaluator {
  id Int @id @default(autoincrement())

  discordID String @unique

  rolePreferences InterviewRoleInfo[]

  currentEvaluations EvaluatorOnInterview[]
  taskEvaluations    TaskEvaluation[]
}
